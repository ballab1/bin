#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use File::Basename;

$| = 1;  # flush data to disk asap

sub logMessage($) {
  my $msg = shift;
  my $pid = $$;
  
  my @tm = localtime();
  open(FH, '>>', '/emc/ballab1/Jenkins/'.basename($0).'.'.$pid.'.log');
  printf FH "%02d:%02d:%02d:%d %s\n", $tm[2], $tm[1], $tm[0], $pid, $msg;
  close FH;
}

# check if there is a prior instance running. Exit if there is, because we only want one.
sub checkNotRunning() {
    my $command = 'ps -C '.basename($0).' -o "%c" --no-headers';
    my @result;
    chomp(@result = qx{$command 2>&1});

    logMessage('should exit(0).')  if (@result > 1);
    logMessage('should keep running.')  unless (@result > 1);
    if (@result > 1) {
       chomp(@result = qx{'ps -efwH' 2>&1});
       logMessage($_) foreach (@result);
       while (@result > 1) {
          sleep(600);
       }
    }
    logMessage($_) foreach (@result);
}


sub memfield($$) {
    my $field = shift;
    my $data = shift;

    $data =~ /$field:\s+(\d+)\s+/ or die "regex failure";
    return $1;
}

my @fields = qw(
    MemTotal
    MemFree
    Buffers
    Cached
    Slab
    SReclaimable
    SwapCached
    SwapTotal
    SwapFree
    Active
    Inactive
    Shmem
);


#-----------------------------------------------------------------------
#
#   MAIN code
#
#-----------------------------------------------------------------------

checkNotRunning();

my $delay = 3;
my $output;

GetOptions(
  'p|delay=i' => \$delay,
  'o|output=s' => \$output,
) or die "Invalid command line arguments";

# NOTES
# MemTotal includes SwapTotal
# MemFree does NOT include reclaimable memory, though it does include SwapFree
# Reclaimable memory includes Buffers, Cached and SReclaimable, EXCEPT for
#   Shmem, which is part of Cached, but not reclaimable

my $out_fh = \*STDOUT;
if (defined $output) {
    open $out_fh, '>', $output or die "Cannot open $output for writing: $!";
    select $out_fh;
}

print join(',', 'Time', @fields) . "\n";
while (1) {
    my $date = time;
    open my $mi_fh, '<', '/proc/meminfo' or die "Cannot open meminfo: $!";
    my $meminfo = do { local $/; <$mi_fh> };
    close $mi_fh;
    my @data = map { memfield $_, $meminfo } @fields;
    print join(',', $date, @data) . "\n";
    sleep $delay;
}
