#!/bin/bash

# Use the Unofficial Bash Strict Mode
set -o errexit
set -o nounset
set -o pipefail
IFS=$'/n/t'

export HOME=/home/bobb
export sup_files=${HOME}/GIT/support
export prd_dir=${HOME}/production
export prd_files=${prd_dir}/libs
export lib_files=${sup_files}/libs
export cbf_files=${sup_files}/container_build_framework/cbf/bashlib
export bld_files=${sup_files}/build_container/build/usr/local/crf/bashlib
export bin_files=${sup_files}/build_container/build/usr/local/bin
export grd_files=${sup_files}/gradle/build/usr/local/crf/bashlib

declare -i DO_REMOTE=${DO_REMOTE:-0}

#----------------------------------------------------------------
function binSync()
{
    local -r src=${1:?}

    [ -d "$src" ] || die "directory '$src' does not exist"

    local dst=/home/bobb/GIT/support/build_container/build/usr/local/bin
    local f
    for f in "$dst"/*; do
        syncFile "${src}/$(basename "$f")" "$f"
    done
}

#----------------------------------------------------------------
function die()
{
    local status=$?
    [[ $status -ne 0 ]] || status=255

    local args="$*"
    [ "${args:0:8}" = '***ERROR' ] || args="***ERROR: $args"
    ( echo
      printf '/x1b[31m%s/x1b[0m/n' "$args"
      echo
      ) >&2
    exit $status
}

#----------------------------------------------------------------
function localSync()
{
    syncLocal "$prd_files" "$lib_files"

    syncLocal "$bld_files" "$lib_files"
    [ -d "${sup_files}/gradle" ] && syncLocal "$bld_files" "$grd_files"
    syncLocal "$bld_files" "$lib_files"

    syncLocal "$cbf_files" "$lib_files"
    syncLocal "$sup_files" "$bin_files" 'oneWay'

    syncLocal "$prd_files" "$lib_files"
    if [ "$DO_REMOTE" -gt 0 ]; then
        syncRemote 'ubuntu-s1'
        syncRemote 'ubuntu-s2'
        syncRemote 'ubuntu-s3'
    fi

    binSync "$sup_files"
    binSync "$prd_dir"
}

#----------------------------------------------------------------
function remoteSync()
{
    local -r host=${1:?}

    if [ "$host" != 'ubuntu-s2' ]; then
        pushd "$prd_files"
        scp -r "ubuntu-s4:${cbf_files}"/* .
        scp -r "ubuntu-s4:${bld_files}"/* .
        scp "ubuntu-s4:${bin_files}/deploy" .
        popd
    fi

    pushd ~/bin
    git reset --hard HEAD~1
    git pull -q
    popd
}

#----------------------------------------------------------------
function syncFile()
{
    local -r src=${1:?}
    local -r dst=${2:?}
    local -r oneWay=${3:-}

    [ -f "$src" ] || return 0

    local sha1="$(sha256sum "$src" | cut -d' ' -f1)"
    local sha2="$(sha256sum "$dst" | cut -d' ' -f1)"
    [ "$sha1" != "$sha2" ] || return 0

    if [ "$src" -nt "$dst" ]; then
        echo "cp '$src' '$dst'"
        cp "$src" "$dst"
    elif [ "${oneWay:-}" ]; then
        return 0
    elif [ "$dst" -nt "$src" ]; then
        echo "cp '$dst' '$src'"
        cp "$dst" "$src"
    fi
}

#----------------------------------------------------------------
function syncLocal()
{
    local -r src=${1:?}
    local -r dst=${2:?}
    local -r oneWay=${3:-}

    [ -d "$src" ] || die "directory '$src' does not exist"
    [ -d "$dst" ] || die "directory '$dst' does not exist"

    local -a files
    mapfile -t files < <(find "$src" -mindepth 1 -maxdepth 1 -print)
    for f1 in "${files[@]}"; do
        f="$(basename "$f1")"
        if [ "$f" = 'properties' ];then
            syncLocal "${src}/properties" "${dst}/properties" "${oneWay:-}"
            continue
        fi
        if [ "${oneWay:-}" ]; then
            [[ ! -d "$f"  &&  -x "$f" ]] || continue
        fi

        syncFile "${src}/$f" "${dst}/$f" "${oneWay:-}"
    done
}

#----------------------------------------------------------------
function syncRemote()
{
    local -r host=${1:?}

    if [ "$host" != 'ubuntu-s2' ]; then
      ( pushd "$prd_files"
        scp -r "${cbf_files}"/* "${host}:${prd_files}"
        scp -r "${bld_files}"/* "${host}:${prd_files}"
        scp "${bin_files}/deploy" "${host}:${prd_dir}"
        popd ) &>/dev/null
    fi

    ssh "$host" 'cd "${HOME}/bin"; echo "$(hostname -s) ~/bin: $(git reset --hard HEAD~1)" ; git pull -q;'
    ssh "$host" 'cd "${HOME}/.work"; echo "$(hostname -s) ~/.work: $(git reset --hard HEAD~1)" ; git pull -q;'
}

#----------------------------------------------------------------


declare host="$(hostname)"
if [ "$host" = 'ubuntu-s4' ]; then
   localSync
elif [ "$DO_REMOTE" -gt 0 ]; then
   remoteSync "$host"
fi
