#!/bin/bash

#---------------------------------------------------------------------------------------------- 
function usage()
{
    cat >&2 << EOF
Save all changes in current repository to upstream branch on GitHub server
Squash merges outstanding changes in the current repo.
    
Usage:
    git-keep [ -h|--help ] | [ --history ] | [ --commit <commitId> ] | [ --message <message>]

    Common options:
        -h --help                Display a basic set of usage instructions
        -c --commit <commitId>   use <commitId> as basis. 
                                 If not specified, HEAD~1 is used as basis, which causes HEAD to be overwritten 
        -m --message <message>   use <message> as the commit message
                                 If not specified, the commit message from HEAD is reused for new commit
           --history             show history of commitId's corResponding to 'git keep' 


NOTE: this should only be used on developer branches. DO not use on a shared branch.

EOF
    exit 0
}

#---------------------------------------------------------------------------------------------- 
function history()
{
    # search and display the history in current local workspace for any previous occasions where 'git-keep' was used
    [ $DEBUG -ne 0 ] && echo -e "${grey}git reflog | grep ':git keep:'$reset"
    git reflog | grep ':git keep:' | more
    exit 0
}

#---------------------------------------------------------------------------------------------- 
function keep()
{
    declare commit="${1:?}"
    declare message="${2:?}"

    # merge content into specified commit of current branch
    if [ $(git rev-parse --abbrev-ref HEAD) = "$MASTER" ] || [ $(git rev-parse HEAD) != $(git rev-parse "$MASTER") ]; then
        run "git add -A"
        run "git commit -m ':git keep: $(date)'"
        run "git reset --soft $commit"
    else
        run "git add -A"
    fi
    run "git commit -m '$message'"
    run "git push -f"
}

#---------------------------------------------------------------------------------------------- 
function run()
{
    [ $DEBUG -ne 0 ] && echo -e "${grey}${*}$reset"
    eval $@
}

#---------------------------------------------------------------------------------------------- 
function verify()
{
    # do nothing when we are not in a GIT directory
    ! git rev-parse --is-inside-work-tree >/dev/null && exit $?

    # do nothing when tree is clean 
    [ "$(git diff HEAD)" ] || [ "$(git status --porcelain)" ] || exit 0
}

#---------------------------------------------------------------------------------------------- 
#
#       MAIN
#
#---------------------------------------------------------------------------------------------- 

declare -r DEBUG=${DEBUG:-1}    # set to 0 if you do not wish to see native 'git' commands
declare -r MASTER=master
declare -r grey='\e[90m'
declare -r reset='\e[0m'
declare -r progname="$( basename "${BASH_SOURCE[0]}" )" 

declare -r options=$(getopt --longoptions "help,Help,HELP,commit:,history,message:" --options "Hhc:m:" --name "$progname" -- "$@") || usage
eval set -- "$options"

declare -A opts=()
declare -i i=0
while [ $# -gt 0 ]; do
    case "${1:-}" in
        -h|--h|--help|-help)  usage;;
        -H|--H|--HELP|-HELP)  usage;;
        --Help|-Help)         usage;;
        -c|--c|--commit)      opts['commit']=$2; shift 2;;
               --history)     history;;
        -m|--m|--message)     opts['commit']=$2; shift 2;;
        --)                   shift; break;;
    esac
done 

# check for changes
verify

# default arguments when nothing specified
[ -z "${opts['commit']:-}" ] && opts['commit']="$(git rev-parse HEAD~1)"
[ -z "${opts['message']:-}" ] && opts['message']="$(git log -1 --format=%s)"

# do our stuff
keep "${opts['commit']}" "${opts['message']}"
