#!/bin/bash

#---------------------------------------------------------------------------------------------- 
function usage()
{
    cat >&2 << EOF
Save all changes in current repository to upstream branch on GitHub server
Squash merges outstanding changes in the current repo.
    
Usage:
    $PROGNAME [ -h|--help ] | [ --history ] | [ --commit <commitId> ] | [ --message <message>]

    Common options:
        -h --help                Display a basic set of usage instructions
        -c --commit <commitId>   use <commitId> as basis. 
                                 If not specified, HEAD~1 is used as basis, which causes HEAD to be overwritten 
        -m --message <message>   use <message> as the commit message
                                 If not specified, the commit message from HEAD is reused for new commit
        -f --force               perform git-keep on reference branch  (main)
           --history             show history of commitId's coresponding to 'git keep' 


NOTE: this should only be used on developer branches. DO not use on a shared branch.

EOF
    exit 0
}

#---------------------------------------------------------------------------------------------- 
function gitReferenceBranch()
{
    local ref="$(git config --get core.branch)"
    [ -z "$ref" ] && ref='main'
    echo $ref
}

#---------------------------------------------------------------------------------------------- 
function history()
{
    # search and display the history in current local workspace for any previous occasions where 'git-keep' was used
    [ "$DEBUG" -ne 0 ] && echo -e "${grey}git reflog | grep ':git keep:'$reset"
    git reflog | grep ':git keep:' | more
    exit 0
}

#---------------------------------------------------------------------------------------------- 
function keep()
{
    run 'git add -A'

    # merge content into specified commit of current branch
    if [ "${OPTS['main']}" = 1 ] || \
       [ "$(git rev-parse --abbrev-ref HEAD)" != "$REF" ] || \
       [ "$(git rev-parse HEAD)" != "$(git ls-remote --heads --quiet | grep "$REF" | awk '{print $1}')" ]; then
        run "git commit -m ':git keep: $(date)'"
        run "git reset --soft ${OPTS['commit']}"
    fi
    run "git commit -m '${OPTS['message']}'"
    run "git push -f"
}

#---------------------------------------------------------------------------------------------- 
function run()
{
    [ $DEBUG -ne 0 ] && echo -e "${grey}${*}$reset"
    eval $@
}

#---------------------------------------------------------------------------------------------- 
function verify()
{
    # do nothing when we are not in a GIT directory
    (! git rev-parse --is-inside-work-tree > /dev/null) && exit $?

    # do nothing when tree is clean
    [ "$(git diff HEAD)" ] || [ "$(git status --porcelain)" ] || exit 0

    #[ $(git rev-parse --verify --quiet "origin/$REF" &> /dev/null ; echo $?) -eq 0 ] || exit 0
}

#---------------------------------------------------------------------------------------------- 
#
#       MAIN
#
#---------------------------------------------------------------------------------------------- 

declare -r grey='\e[90m'
declare -r reset='\e[0m'
declare -r PROGNAME="$( basename "${BASH_SOURCE[0]}" )" 
declare -r DEBUG=${DEBUG:-1}    # set to 0 if you do not wish to see native 'git' commands

declare -A OPTS=(['main']=0)
declare -i i=0
declare -r options=$(getopt --longoptions "help,Help,HELP,commit:,force,history,message:" --options "Hhfc:m:" --name "$PROGNAME" -- "$@") || usage

eval set -- "$options"
while [ $# -gt 0 ]; do
    case "${1:-}" in
        -h|--h|--help|-help)  usage;;
        -H|--H|--HELP|-HELP)  usage;;
        --Help|-Help)         usage;;
        -c|--c|--commit)      OPTS['commit']=$2; shift 2;;
               --history)     history;;
        -m|--m|--message)     OPTS['commit']=$2; shift 2;;
        -f|--f|--force)       OPTS['main']=1; shift; break;;
        --)                   shift; break;;
    esac
done 

# check for changes
declare -r REF=$(gitReferenceBranch)
verify

# default arguments when nothing specified
[ -z "${OPTS['commit']:-}" ] && OPTS['commit']="$(git rev-parse HEAD~1)"
[ -z "${OPTS['message']:-}" ] && OPTS['message']="$(git log -1 --format=%s)"

# do our stuff
keep
