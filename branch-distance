#!/bin/bash

# do nothing when we are not in a GIT directory
declare insideWorkTree="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
if [[ $? != 0 || "$insideWorkTree" != 'true' ]]; then
    echo -e "\e[93m$(pwd) is not a GIT directory\e[0m"
    exit 0
fi

declare repo="$(basename "$(git remote get-url origin)")"
repo="${repo/.git}"

gitMainBranch() {
    local master="$(git config --get core.branch)"
    [ -z "$master" ] && master='master'
    echo $master
}

declare master="${1:-$(gitMainBranch)}"

declare -i count=0
while read -r test_branch; do

    [ "$test_branch" != "$master" ] && continue
    (( count++ )) ||:

done < <(git for-each-ref --format="%(refname:lstrip=2)" refs/heads)


# do nothing when $master does not exist
if [ $count -eq 0 ]; then
    echo -e "    \e[93m${master} branch does not exist\e[0m"
    exit 0
fi

declare -i LEFT_AHEAD RIGHT_AHEAD

while read -r test_branch; do

    [ "$test_branch" = "$master" ] && continue

    git rev-list --left-right ${test_branch}...origin/${master} -- 2>/dev/null >/tmp/git_upstream_status_delta || continue
    LEFT_AHEAD=$(grep -c '^<' /tmp/git_upstream_status_delta)
    RIGHT_AHEAD=$(grep -c '^>' /tmp/git_upstream_status_delta)
    [ $LEFT_AHEAD -eq 0 ] && [ $RIGHT_AHEAD -eq 0 ] && continue
    echo "${repo} | ${test_branch} (ahead $LEFT_AHEAD) | (behind $RIGHT_AHEAD) origin/$master"

#    declare distance=$(git rev-list --left-right --count origin/${master}...${test_branch} | awk '{print $2}')
#    [ "$distance" -eq 0 ] && continue
#    echo "${repo} ${test_branch}:  ${distance} commits from $master"

done < <(git for-each-ref --format="%(refname:lstrip=2)" refs/heads)
