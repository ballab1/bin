#!/bin/bash -x

#---------------------------------------------------------------------------------------------- 
function downloadExporter() {

    local MACHINE="$(getMachine)"
    local NODE_EXPORTER_VER="node_exporter-${NODE_EXPORTER_VERSION}.linux-${MACHINE}"

    cd /tmp
    wget "https://github.com/prometheus/node_exporter/releases/download/v${NODE_EXPORTER_VERSION}/${NODE_EXPORTER_VER}.tar.gz"
    tar xzf "${NODE_EXPORTER_VER}.tar.gz"
    cd "${NODE_EXPORTER_VER}"
    mv node_exporter "/usr/local/bin/${NODE_EXPORTER_VER}"
    ln -s "/usr/local/bin/${NODE_EXPORTER_VER}" "$NODE_EXPORTER"
    cd ..
    rm -rf "${NODE_EXPORTER_VER}"*
}

#---------------------------------------------------------------------------------------------- 
function getMachine() {
    case $(uname -m) in
      armv7l)   echo 'armv7';;
      x86_64)   echo 'amd64';;
      i686)     echo '386';;
    esac
    return 0
}

#---------------------------------------------------------------------------------------------- 
function init_d() {
cat << EOF
#!/bin/bash

RETVAL=0
PROG="node_exporter"
EXEC="$NODE_EXPORTER"
LOCKFILE="/var/lock/subsys/$PROG"
OPTIONS="$(node_exporter.options)"

# Source function library.
if [ -f /etc/rc.d/init.d/functions ]; then
  . /etc/rc.d/init.d/functions
else
  echo "/etc/rc.d/init.d/functions does not exist"
  exit 0
fi

start() {
  if [ -f \$LOCKFILE ]
  then
    echo "\$PROG is already running!"
  else
    echo -n "Starting $PROG: "
    nohup \$EXEC \$OPTIONS >/dev/null 2>&1 &
    RETVAL=$?
    [ \$RETVAL -eq 0 ] && touch \$LOCKFILE && success || failure
    echo
    return \$RETVAL
  fi
}

stop() {
  echo -n "Stopping $PROG: "
  killproc \$EXEC
  RETVAL=\$?
  [ \$RETVAL -eq 0 ] && rm -r \$LOCKFILE && success || failure
  echo
}

restart ()
{
  stop
  sleep 1
  start
}

case "\$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status \$PROG
    ;;
  restart)
    restart
    ;;
  *)
    echo "Usage: \$0 {start|stop|restart|status}"
    exit 1
esac
exit \$RETVAL
EOF
}

#---------------------------------------------------------------------------------------------- 
function openbsd() {
cat << 'EOF'
#!/bin/ksh
# Shawn Craver, 2019-04-02


daemon="$NODE_EXPORTER"

. /etc/rc.d/rc.subr

rc_bg=YES

rc_cmd $1
EOF
}

#---------------------------------------------------------------------------------------------- 
function openwrt() {
cat << EOF
#!/bin/sh /etc/rc.common

START=99

USE_PROCD=1
PROG="$NODE_EXPORTER"
OPTIONS="$(node_exporter.options)"

start_service() {
	procd_open_instance
	procd_set_param command "\$PROG" "\${OPTIONS}"
	procd_close_instance
}
EOF
}

#---------------------------------------------------------------------------------------------- 
function node_exporter.service() {
cat << EOF
[Unit]
Description=Node Exporter

[Service]
User=node_exporter
EnvironmentFile=/etc/node_exporter.opts
ExecStart=$NODE_EXPORTER \$OPTIONS

[Install]
WantedBy=multi-user.target
EOF
}

#---------------------------------------------------------------------------------------------- 
function node_exporter.options() {
cat << 'EOF'
OTIONS="--collector.textfile.directory /var/lib/node_exporter/textfile_collector \
  --path.sysfs=/sys \
  --path.rootfs=/root \
  --no-collector.wifi \
  --no-collector.hwmon \
  --collector.filesystem.ignored-mount-points='^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)' \
  --collector.netclass.ignored-devices='^(veth.*)$' \
  --collector.netdev.device-exclude='^(veth.*)'"
EOF
}

#---------------------------------------------------------------------------------------------- 
function setup.textfile_collector() {

    local -r dir="${1:?}"
    mkdir -p "$dir" ||: 
    addgroup --gid 65533 node_exporter
    adduser --home /nonexistent --shell /sbin/nologin --no-create-home --uid 65533 --gid 65533 --disabled-password --quiet node_exporter
    chown 65533:65533 "$dir"
}

#---------------------------------------------------------------------------------------------- 
function install.node_exporter() {

    [ -f /usr/sbin/node_explorer ] && rm /usr/sbin/node_explorer
    downloadExporter
    [ -f /etc/node_exporter.opts ] && rm /etc/node_exporter.opts
    node_exporter.options > /etc/node_exporter.opts
    [ -f /etc/node_exporter.opts ] || setup.textfile_collector '/var/lib/node_exporter/textfile_collector'

#    case $(source /etc/os-release;echo "$ID_LIKE") in
    case 'debian2' in
       debian2)  init_d > /etc/init.d/node_exporter
                 chmod 755 /etc/init.d/node_exporter
                 ln -s /etc/init.d/node_exporter /etc/rc5.d/S30node_exporter
                 ;;
       2)  openbsd > /tmp/rc.d
           ;;
       3)  openwrt > /tmp/init.d
           ;;
       debian)  node_exporter.service > /etc/systemd/system/node_exporter.service
                systemctl enable node_exporter
                systemctl start node_exporter
                systemctl status node_exporter
               ;;
    esac
}

#---------------------------------------------------------------------------------------------- 

# ensure this script is run as root
if [[ $EUID != 0 ]]; then
  sudo --preserve-env $0
  exit
fi

export NODE_EXPORTER_VERSION='1.3.1'
export NODE_EXPORTER='/usr/sbin/node_explorer'

install.node_exporter
