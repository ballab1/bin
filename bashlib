#!/bin/bash
#############################################################################
#
#   bashlib.sh
#
#############################################################################

function createUserAndGroup()
{
    local -r user=$1
    local -r uid=$2
    local -r group=$3
    local -r gid=$4
    local -r homedir=$5
    local -r shell=$6 

    /usr/sbin/groupadd --gid "${gid}" "${group}"
    if [ "$homedir" = '--no-create-home' ]; then
        /usr/sbin/useradd  --no-create-home --uid "${uid}" --gid "${gid}" --shell "${shell}" "${user}" 
    else
        /usr/sbin/useradd --home-dir "$homedir" --uid "${uid}" --gid "${gid}" --shell "${shell}" "${user}" 
    fi
}

#############################################################################
function perlmodver
{
  perl -M$1 -e 'print "Version ".$ARGV[0]->VERSION." of ".$ARGV[0]." is installed.\n";' $1
}

#############################################################################
function rmOldContainers()
{
    # remove all containers which are stopped along with their associated volumes
    local -a containers=()
    containers+=( $(docker ps --all --quiet --filter "status=exited" --filter "status=dead" --format "{{.Names}}") )
    containers=( $(printf "%s\n" "${containers[@]}" | uniq ) )
    [ ${#containers[@]} -eq 0 ] || docker rm --volumes "${containers[@]}"

    # remove any 'dangling' images  (those with <none> in name)
    containers=( $(docker images --quiet --filter "dangling=true") )
    [ ${#containers[@]} -eq 0 ] || docker rmi "${containers[@]}"
    unset containers

    # get list of volumes associated with running containers
    local -a volumes=()
    for v in $(docker ps --all --quiet); do
        volumes+=( $(docker inspect "$v" | jq -r '.[] | .Mounts | .[] | .Name | select(.)') )
    done

    # remove directories associated with unused volumes
    local -a dirs=()
    for dir in $(sudo find '/var/lib/docker/volumes/' -mindepth 1 -maxdepth 1 -type d); do
        (printf "%s\n" "${volumes[@]}" | grep -v "$dir") && continue
        dirs+=( "$dir" )
    done
    sudo rm -rf "${dirs[@]}" 
    
    docker images
}

#############################################################################
function findInProjects()
{
    cd /home/bobb
    for f in $(sudo find support prod -maxdepth 4 -type d -name 'build' | sort); do
        grep -rE "$1" "$f"
    done
}

#############################################################################
function dockerImages()
{
   docker images
}

#############################################################################
function dockerProcesses()
{
   docker ps --format "table {{.Names}}\t{{.ID}}\t{{.Size}}\t{{.Status}}\t{{.RunningFor}}\t{{.Ports}}"
}

#############################################################################
function dockerNetworks()
{
   docker network inspect $( docker network ls | grep 'default' | awk "{ print \$1 }") | jq ".[].Containers|.[]|[.IPv4Address + \" : \" + .Name]|.[]" | sort -t "." -k 4g
}

#############################################################################
function removeCurrentContainers()
{
    local -a containers=( $(docker images -q -f "reference=*:2018*"  --format "{{.Repository}}:{{.Tag}}") )
    [ ${#containers[@]} -eq 0 ] || docker rmi --force "${containers[@]}"
    docker images
}
