#!/bin/bash
#############################################################################
#
#   bashlib.sh
#
#############################################################################

function createUserAndGroup()
{
    local -r user=$1
    local -r uid=$2
    local -r group=$3
    local -r gid=$4
    local -r homedir=$5
    local -r shell=$6 

    /usr/sbin/groupadd --gid "${gid}" "${group}"
    if [ "$homedir" = '--no-create-home' ]; then
        /usr/sbin/useradd  --no-create-home --uid "${uid}" --gid "${gid}" --shell "${shell}" "${user}" 
    else
        /usr/sbin/useradd --home-dir "$homedir" --uid "${uid}" --gid "${gid}" --shell "${shell}" "${user}" 
    fi
}

#############################################################################
function perlmodver {
  perl -M$1 -e 'print "Version ".$ARGV[0]->VERSION." of ".$ARGV[0]." is installed.\n";' $1
}

#############################################################################
function rmOldContainers()
{
    local -a containers=$(docker ps --all --filter "name=_" --format "{{.Names}}")
    [ ${#containers[@]} -eq 0 ] || docker rm --force ${containers[@]}
    containers=$(docker ps -a --filter "status=exited" --filter "status=dead" --format "{{.Names}}")
    [ ${#containers[@]} -eq 0 ] || docker rm ${containers[@]}
    containers=$(docker images --filter "dangling=true" --quiet)
    [ ${#containers[@]} -eq 0 ] || docker rmi ${containers[@]}
    docker images
}

#############################################################################
function cbfRepos()
{
   git submodule status --recursive | grep 'build/container' | awk '{ print $2 }'
}

#############################################################################
function dockerImages()
{
   docker images
}

#############################################################################
function dockerProcesses()
{
   docker ps --format "table {{.Names}}\t{{.ID}}\t{{.Size}}\t{{.Status}}\t{{.RunningFor}}\t{{.Ports}}"
}

#############################################################################
function dockerNetworks()
{
   docker network inspect $( docker network ls | grep 'default' | awk "{ print \$1 }") | jq ".[].Containers|.[]|[.IPv4Address + \" : \" + .Name]|.[]" | sort -t "." -k 4g
}
