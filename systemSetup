#!/bin/bash

# need to include changes to
#    /etc/dhcp/dhclient.conf
#    /etc/netplan/00-installer-config.yaml
#    /etc/netplan/50-cloud-init.yaml
#    /etc/fstab

#----------------------------------------------------------------------------
function systemSetup.ALL() {
    local method
    for method in $(systemSetup.functions | grep -E '\d' | LC_ALL=C sort); do
        {
            echo
            echo "systemSetup.${method//. /_}"
        } >&2
        systemSetup."${method//. /_}"
    done
}

#----------------------------------------------------------------------------
function systemSetup.01_addSudoers() {
    local target=/etc/sudoers.d/myOverrides
    [ -f "$target" ] && return 0 

    echo "Add user to $target"
    cat << EOF > "$target"
bobb      ALL=(ALL:ALL) NOPASSWD:  ALL
EOF
}

#----------------------------------------------------------------------------
function systemSetup.02_requiredPackages() {
    echo 'Setting up required packages'
    add-apt-repository universe
    apt-get update
    systemSetup.run apt-get install -y build-essential nfs-common nfs-kernel-server tasksel libxml2 libxml2-dev
    systemSetup.run apt-get install -y openjdk-8-jre-headless cifs-utils docker-compose jq
    systemSetup.run apt-get install -y python3 python-pip
    systemSetup.run apt-get install -y librdkafka++1 librdkafka1 python3-confluent-kafka
}

#----------------------------------------------------------------------------
function systemSetup.03_installWebAdmin() {
    [ "$(grep -sc 'webmin.com' /etc/apt/sources.list)" -ne 0 ] && return 0

    echo 'webadmin no longer installed'
#    echo 'Installing webadmin'
#    wget -qO- http://www.webmin.com/jcameron-key.asc | sudo apt-key add
#    add-apt-repository "deb http://download.webmin.com/download/repository sarge contrib"
#    systemSetup.run apt update
#    systemSetup.run apt install -y webmin
}

#----------------------------------------------------------------------------
function systemSetup.04_getLatestDockerCompose() {
    local target="/usr/local/bin/docker-compose.$DC_COMPOSE_VER"
    [ -f "$target" ] && return 0 

    echo "get docker-compose $DC_COMPOSE_VER"
    systemSetup.run systemSetup.saveDefaultDockerCompose || return 0; 
    echo 'Downloading latest docker-compose'
    systemSetup.run curl -L "https://github.com/docker/compose/releases/download/v${DC_COMPOSE_VER}/docker-compose-$(uname -s)-$(uname -m)" -o "$target"
    chmod 755 "$target"
    systemSetup.run ln -s "$target" /usr/bin/docker-compose
}

#----------------------------------------------------------------------------
function systemSetup.05_setupRegistryAccess() {
    local daemonFile='/etc/docker/daemon.json'

    mkdir -p "$(dirname "$daemonFile")" ||:
    if [ ! -f "$daemonFile" ]; then
        echo "Updating $daemonFile"
        echo '{ "insecure-registries":["s2.ubuntu.home:5000","ubuntu-s2.home:5000","10.3.1.12:5000"] }' > "${daemonFile}.tmp"

    elif [ "$(jq 'has("insecure-registries")')" != 'true' ]; then
        echo "Updating $daemonFile"
        jq '. + { "insecure-registries":["s2.ubuntu.home:5000","ubuntu-s2.home:5000","10.3.1.12:5000"] }' "$daemonFile" > "${daemonFile}.tmp"

    elif [ "$(jq '."insecure-registries"[]|contains( "\"s2.ubuntu.home:5000\",\"ubuntu-s2.home:5000\",\"10.3.1.12:5000\"" )' "$daemonFile")" != 'true' ]; then
        echo "Updating $daemonFile"
        jq 'map_values(. +  ["s2.ubuntu.home:5000","ubuntu-s2.home:5000","10.3.1.12:5000"] )' "$daemonFile" > "${daemonFile}.tmp"

    else
        return 0
    fi
    jq '.' "${daemonFile}.tmp" > "$daemonFile"
    systemctl restart docker
}

#----------------------------------------------------------------------------
function systemSetup.06_exposeDockerRestAPI() {
    local target=/lib/systemd/system/docker.service
    [ "$(grep -sc 'tcp://0.0.0.0:4243' "$target")" -gt 0 ] && return 0 

    echo 'Exposing docker REST API'
    echo -e '\e[93msed -iE '"'"'s|^(ExecStart=/usr/bin/dockerd -H fd://)(.*)$|\1 -H tcp://0.0.0.0:4243\2|'"' $target"'\e[0m'
    sed -i -E 's|^(ExecStart=/usr/bin/dockerd -H fd://)(.*)$|\1 -H tcp://0.0.0.0:4243\2|' "$target"
    systemSetup.run systemctl daemon-reload
    systemSetup.run systemctl restart docker
}

#----------------------------------------------------------------------------
function systemSetup.09_USER() {
    if [[ ${myUID:-} || ${myGID:-} ]]; then
        echo 'looks like user alread setup'
        return 0
    fi
    systemSetup.run userADD --create-home --gid users --GROUPS docker jenkins www --shell bash bobb
}

#----------------------------------------------------------------------------
function systemSetup.11_installGitLFS() {
    if [ -z "${myHOME:-}" ] || [ ! -d "${myHOME}/.bin" ]; then
        echo 'need to run this from non-user'
        return 0
    fi
    git lfs version &> /dev/null && return 0 

    echo 'install Git-LFS support'
    systemSetup.run curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
    systemSetup.run apt-get install git-lfs
    cd "${myHOME}/.bin"
    systemSetup.run git lfs install
}

#----------------------------------------------------------------------------
function systemSetup.12_jenkinsSlaveFolders() {
    [[ -d /home/jenkins.s3 && -d /home/jenkins.s4 ]] && return 0
    if [ -z "${myUID:-}" ]; then
        echo 'need to run this from non-user'
        return 0
    fi

    echo 'make directories for Jenkins Slaves'
    systemSetup.run mkdir -p /home/jenkins.s3 ||:
    systemSetup.run mkdir -p /home/jenkins.s4 ||:
    chown "${myUID}:$myGID" /home/jenkins.s3 /home/jenkins.s4
}

#----------------------------------------------------------------------------
function systemSetup.13_updatePerlSupport() {
    false || return 0    # skip this
    if [[ -z ${myUID:-} || -z ${myGID:-} || -z ${myHOME:-} ]]; then
        echo 'need to run this from non-user'
        return 0
    fi

    [ -d "${myHOME}/.cpan" ] && return 0
    echo 'Adding needed PERL modules'
    systemSetup.run "cpan -i XML::LibXML <<< $(echo 'yes')"
    chown "${myUID}:$myGID" -R "${myHOME}/.cpan"
}

#----------------------------------------------------------------------------
function systemSetup.14_getGitRepos() {
    local -A repos=(["${myHOME}/.enterprise"]='https://github.com/ballab1/enterprise-config-for-git ballab1'
                    ["${myHOME}/.work"]='https://github.com/ballab1/work-stuff'
                    ["${myHOME}/GIT/other/git-submodule-tools"]='https://github.com/ballab1/git-submodule-tools'
                    ["${myHOME}/.inf"]='https://github.com/ballab1/secrets'
                    ["${myHOME}/.tmux"]='https://github.com/ballab1/tmux_config'
                    ["${myHOME}/.ssh"]='https://github.com/ballab1/common_ssh_config'
                   )
    local -i isDone=0
    local dir
    for dir in "${!repos[@]}"; do
        [ -d "$dir" ] || isDone=1
    done
    [ $isDone -eq 0 ] && return 0 
    if [[ -z ${myUID:-} || -z ${myGID:-} || -z ${myHOME:-} ]]; then
        echo 'need to run this from non-user'
        return 0
    fi

    echo 'setting up standard GIT repos'
    local -a repoInfo
    for dir in "${!repos[@]}"; do
        [ -d "$dir" ] && rm -rf "$dir"
        unset repoInfo
        mapfile -t repoInfo < <(echo ${repos["$dir"]} | awk '{print $0}' RS=' ')
        if [ ${#repoInfo[*]} -gt 1 ] && [ "${repoInfo[1]}" ]; then
            systemSetup.run git clone --recurse-submodules -b "${repoInfo[1]}" "${repoInfo[0]}" "$dir"
        else
            systemSetup.run git clone --recurse-submodules "${repoInfo[0]}" "$dir"
        fi
        find "$dir" -exec chown "${myUID}:$myGID" '{}' \;
    done
}

#----------------------------------------------------------------------------
function systemSetup.15_redirectOwnBashFiles() {
    local -A symlinks=(["${myHOME}/.bash_aliases"]="${myHOME}/.bin/bash_aliases"
                       ["${myHOME}/.bash_logout"]="${myHOME}/.bin/bash_logout"
                       ["${myHOME}/.bashrc"]="${myHOME}/.bin/bashrc"
                       ["${myHOME}/.gitconfig"]="${myHOME}/.bin/gitconfig"
                       ["${myHOME}/.tmux.conf"]="${myHOME}/.tmux/tmux.conf"
                       ['/usr/local/bin/git-crypt']="${myHOME}/.bin/$(uname -p)/git-crypt"
                      )
    local -i isDone=0
    local link
    for link in "${!symlinks[@]}"; do
        [ -e "$(stat --format='%N' "$link" | awk '{gsub("'"'"'","",$3); print $3}')" ] && continue
        isDone=1
    done
    [ $isDone -eq 0 ] && return 0 
    if [[ -z ${myUID:-} || -z ${myGID:-} || -z ${myHOME:-} ]]; then
        echo 'need to run this from non-user'
        return 0
    fi

    echo 'Redirect own BASH files'
    for link in "${!symlinks[@]}"; do
        stat --format='%i' "$link" &> /dev/null && rm "$link"
        systemSetup.run ln -s "${symlinks[$link]}" "${link}"
        chown "${myUID}:$myGID" "$link"
    done
}

#----------------------------------------------------------------------------
function systemSetup.16_unencryptRepos() {
    if [ -z "$(which git-crypt)" ]]; then
        if [ ! -e "${myHOME}/.bin/$(uname -m)/git-crypt" ]; then
            echo 'need "git-crpyt" installed before running'
            return 0
        fi
    fi
    if [ ! -e $CRYP_SECRET ]; then
        echo 'need to obtain secret key before running'
        return 0
    fi
    if [[ -z ${myUID:-} || -z ${myGID:-} ]]; then
        echo 'need to run this from non-user'
        return 0
    fi
    local -a repoDirs=("${myHOME}/.inf"
                       "${myHOME}/.work"
                       "${myHOME}/.ssh"
                      )

    [ -z "$(which git-crypt)" ] && systemSetup.run sudo ln -s "${myHOME}/.bin/$(uname -m)/git-crypt" /usr/local/git-crypt
    local dir
    for dir in "${repoDirs[@]}"; do
        pushd "$dir"
        git-crypt unlock "$CRYP_SECRET"
        popd
        chown -R "${myUID}:$myGID" "$dir"
    done

    systemSetup.verifyPermisions 755 "$myHOME"
    systemSetup.verifyPermisions 700 "${myHOME}/.ssh"
    systemSetup.verifyPermisions 600 "${myHOME}/.ssh/authorized_keys"
    systemSetup.verifyPermisions 600 "${myHOME}/.ssh/id_rsa"
    systemSetup.verifyPermisions 644 "${myHOME}/.ssh/id_rsa.pub"
    systemSetup.verifyPermisions 644 "${myHOME}/.ssh/known_hosts"  
}

#----------------------------------------------------------------------------
function systemSetup.17_updateHosts() {
    [ "$(hostname -s).home" = "$(hostname -f)" ] && return 0
    if [ ! -e "${myHOME}/.inf/hosts" ]; then
        echo 'need to run this from non-user'
        return 0
    fi
cat << EOF
  modify /etc/netplan/50-cloud-init.yaml
    network:
        version: 2
        renderer: networkd
        ethernets:
            eno1:
                dhcp4: true
                dhcp6: true
                nameservers:
                    search: [ ubuntu.home, home ]

  modify /etc/hostname
   - include dns '.home' suffix

  then run netplan try
  set hostname using:  hostnamectl set-hostname s2.ubuntu.home
  verify with hostname -s, hostname -f, systemd-resolve --status
EOF
}

#----------------------------------------------------------------------------
function systemSetup.18_updateUsersAndGroups() {
    echo 'Updating users and groups'

    [ "$(getent passwd www-data)" ] || systemSetup.run usermod  --uid 33 www-data
    systemSetup.run groupmod --gid 33 www-data
    [ "$(getent group mysql)" ] || systemSetup.run groupadd --gid 909 mysql

    [ "$(getent group nginx)" ] || systemSetup.run groupadd --gid 1001 nginx
    [ "$(getent passwd nginx)" ] || systemSetup.run useradd --no-create-home --gid 1001 --uid 1001 --shell /sbin/nologin nginx  

    [ "$(getent group nagios)" ] || systemSetup.run groupadd --gid 1002 nagios
    [ "$(getent passwd nagios)" ] || systemSetup.run useradd --no-create-home --gid 1002 --uid 1002 --shell /sbin/nologin nagios 

    [ "$(getent group jenkins)" ] || systemSetup.run groupadd --gid 1003 jenkins
    [ "$(getent passwd jenkins)" ] || systemSetup.run useradd --no-create-home --gid 1003 --uid 1003 --shell /sbin/nologin jenkins

    [ "$(getent group webdav)" ] || systemSetup.run groupadd --gid 2222 webdav
    [ "$(getent passwd webdav)" ] || systemSetup.run useradd --no-create-home --gid 2222 --uid 2222 --shell /sbin/nologin webdav 

    systemSetup.run usermod --groups "$myNAME",docker,jenkins,nginx,nagios,www-data,webdav "$myNAME"
}

#----------------------------------------------------------------------------
function systemSetup.19_networkMounts() {
    local target=/etc/fstab
    [[ "$(grep -scE '\s+/mnt/(WDMyCloud|Synology)\s+' "$target")" -eq 3 && \
       -d /mnt/WDMyCloud && \
       -d /mnt/Synology && \
       -d /mnt/ubuntu && \
       -d "${myHOME}/src" ]] && return 0


    echo 'Setting up mounts for network shares'
    [ -d /mnt/WDMyCloud ] || mkdir -p /mnt/WDMyCloud ||:
    [ -d /mnt/Synology ] || mkdir -p /mnt/Synology ||:
    [ -d /mnt/ubuntu ] || mkdir -p /mnt/ubuntu ||:
    [ -d "${myHOME}/src" ] || mkdir -p "${myHOME}/src" ||:

    cat << EOF >> "$target"
#
#10.3.1.4:/volume1/WdMyCloud /mnt/Synology nfs vers=4
#10.3.1.5:/nfs /mnt/WDMyCloud nfs vers=3
#
nas.home:/volume1/ubuntu /mnt/ubuntu nfs vers=4
/mnt/ubuntu /home/bobb/src        none    bind
EOF
    mount -a ||:
}

#----------------------------------------------------------------------------
function systemSetup.20_pythonSupport() {

    [ "$(which pip)" ] && (python -c "import yaml; print(yaml.__version__)" &> /dev/null) && return 0


    echo 'Setting up YAML support via python'
    if [ -z "$(which pip)" ]; then
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python get-pip.py
        rm get-pip.py
    fi


    (python -c "import yaml; print(yaml.__version__)" &> /dev/null) && return 0
    pip install pyyaml==5.3.1 confluent_kafka==1.5.0
    python -c "import yaml; print(yaml.__version__)"
}

#----------------------------------------------------------------------------
function systemSetup.21_dockerAccess() {

    systemSetup.run sudo usermod chmod a+rw /run/docker.sock
    if [ $(grep -Ec '^docker.+bobb' /etc/group) -eq 0 ]; then
        systemSetup.run sudo usermod --append --groups docker "${myUID}"
    fi
}

#----------------------------------------------------------------------------
function systemSetup.22_rsyslog() {

    if [ $(grep -c '^*.* @@10.3.1.15:514' /etc/rsyslog.conf) -eq 0 ]; then
        if [ ! -f /mnt/ubuntu/rsyslog.client.conf ]; then
            echo 'no template found'
            return 0
        fi
        cp /mnt/ubuntu/rsyslog.client.conf /etc/rsyslog.conf
        systemSetup.run sudo systemctl restart rsyslog
    fi
}

#----------------------------------------------------------------------------
function systemSetup.doFunction() {
    
    local -a functions
    mapfile -t functions < <(systemSetup.functions ||:)

    local arg
    local -a results

    # verify args
    for arg in "$@"; do
        mapfile -t results < <(printf '%s\n' "${functions[@]}" | grep "$arg" ||:)
        if [ ${#results[*]} -ne 1 ]; then
             echo 'Invalid arguments'
             return 0
        fi
    done

    # run args
    for arg in "$@"; do
        mapfile -t results < <(printf '%s\n' "${functions[@]}" | grep "$arg" ||:)
        echo "systemSetup.${results[0]//. /_}"
        systemSetup.${results[0]//. /_}
    done
}

#----------------------------------------------------------------------------
function systemSetup.functions() {
    # list all user functions
    grep -E '^function' "${PROGRAM_DIR}/$PROGNAME" \
    | sed -re 's|^function systemSetup.(.+)\s*\(.+$|\1|' \
    | grep -vE '^(functions|doFunction|getUserInfo|run|saveDefaultDockerCompose|showEnvironment|usage|userInfo|verifyPermisions)$' \
    | sed -E 's|_|. |g' \
    | LC_ALL=C sort
}

#----------------------------------------------------------------------------
function systemSetup.getUserInfo() {
    local key=${1:?}
    (IFS=' ' source "$USER_INFO_FILE" | echo $key)
}

#----------------------------------------------------------------------------
function systemSetup.run() {
    printf '\e[93m%s\e[0m\n' $(IFS=' ' echo $*)
    if [ ${DEBUG:-0} -eq 0 ]; then
        $@ > /dev/null
    else
        $@
    fi
}

#----------------------------------------------------------------------------
function systemSetup.saveDefaultDockerCompose() {
    local -r compose="$(command -v docker-compose)"
    [ "$compose" ] || return 0

    local -r dc_compose_ver=$(docker-compose --version | awk '{ print substr($3,0,length($3)-1)}')
    [ "$DC_COMPOSE_VER" = "$dc_compose_ver" ] && return 0

    echo 'Updating docker-compose to v'"$DC_COMPOSE_VER"
    if [ ! -h "$compose" ]; then
        echo 'Saving default docker-compose'
        [ -e "/usr/local/bin/docker-compose.$dc_compose_ver" ] || mv "$compose" "/usr/local/bin/docker-compose.$dc_compose_ver"
    fi
    [ ! -e /usr/bin/docker-compose ] || rm /usr/bin/docker-compose
}

#----------------------------------------------------------------------------
function systemSetup.showEnvironment() {
    env
}

#----------------------------------------------------------------------------
function systemSetup.usage() {
    echo
    echo "$PROGNAME -  available functions:"
    local -a methods
    mapfile -t methods < <(systemSetup.functions)
    printf '    %s\n' "${methods[@]}"
    echo
}

#----------------------------------------------------------------------------
function systemSetup.userInfo()
{
    echo "myNAME='${1//:}'"
    echo "myUID=${3//:}"
    echo "myGID=${4//:}"
    echo "myFULLNAME='${5//:}'"
    echo "myHOME=${6//:}"
    echo "mySHELL=${7//:}"
}

#----------------------------------------------------------------------------
function systemSetup.verifyPermisions()
{
    local perms="${1:?}"
    local file="${2:?}"

    if [ "$(stat --format '%a %u:%g' "$file")" != "${perms} ${myUID}:$myGID" ]; then
        echo -n "fixing '$file':: was $(stat --format '%A %U:%G' "$file")" 
        sudo chown "${myUID}:$myGID" "$file"
        sudo chmod "$perms" "$file"
        echo "  is now $(stat --format '%A %U:%G' "$file")"
        echo
        echo
    fi
}

##################################################################################################
#
#      MAIN
#
##################################################################################################

# Use the Unofficial Bash Strict Mode
set -o errexit
set -o nounset
set -o pipefail
IFS=$'\n\t'

declare -r DC_COMPOSE_VER=2.4.0
declare -r CRYP_SECRET=~/.crypt-key
declare -r USER_INFO_FILE=/tmp/userInfo
declare -r PROGNAME="$(basename "${BASH_SOURCE[0]}")"
declare -r PROGRAM_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" 

if [ $# -eq 0 ] || [[ "${1,,}" = *help ]] || [[ "${1,,}" = *usage ]]; then
    systemSetup.usage
    exit
fi

# always run as root
if [ ${EUID:-0} -ne 0 ]; then
    systemSetup.userInfo $(getent passwd $EUID | awk '{printf ":%s:\n", $0}' RS=':') > "$USER_INFO_FILE"
    sudo --preserve-env "$0" "$@"
    rm "$USER_INFO_FILE"
    exit
fi

export PATH="${PATH}:${HOME}/.bin"
[ -e "${PROGRAM_DIR}/trap.bashlib" ] && source "${PROGRAM_DIR}/trap.bashlib"
[ -e "$USER_INFO_FILE" ] && source "$USER_INFO_FILE"

systemSetup.doFunction "$@"
