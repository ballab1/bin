#!/bin/bash 
declare -r PROGRAM_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
declare -r loader="${PROGRAM_DIR}/utilities/appenv.bashlib"
if [ ! -e "$loader" ]; then
    echo 'Unable to load libraries' >&2
    exit 1
fi
source "$loader"
appenv.loader '-'


declare -a vars=( $(git rev-parse --local-env-vars) )
#mapfile -t vars <(git rev-parse --local-env-vars)
term.log 'List the GIT_* environment variables that are local to the repository (e.g. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR). Only the names of the variables are listed, not their value, even if they are set.\n' 'grey' 'grey'
term.log '    git rev-parse --local-env-vars:\n'
for var in "${vars[@]}"; do
    term.log '        '"${var}"': ' 'yellow'
    term.log "${!var:-}"'\n' 'cyan'
done

term.log 'Show $GIT_DIR if defined. Otherwise show the path to the .git directory. The path shown, when relative, is relative to the current working directory.\n' 'grey'
term.log 'If $GIT_DIR is not defined and the current directory is not detected to lie in a Git repository or work tree print a message to stderr and exit with nonzero status.\n' 'grey'
term.log '    git rev-parse --git-dir: '
term.log "$(git rev-parse --git-dir)"'\n' 'yellow'

term.log 'Like --git-dir, but its output is always the canonicalized absolute path.\n' 'grey'
term.log '    git rev-parse --absolute-git-dir: '
term.log "$(git rev-parse --absolute-git-dir)"'\n' 'yellow'

term.log 'Show $GIT_COMMON_DIR if defined, else $GIT_DIR.\n' 'grey'
term.log '    git rev-parse --git-common-dir: '
term.log "$(git rev-parse --git-common-dir)"'\n' 'yellow'

term.log 'When the current working directory is below the repository directory print "true", otherwise "false".\n' 'grey'
term.log '    git rev-parse --is-inside-git-dir: '
term.log "$(git rev-parse --is-inside-git-dir)"'\n' 'yellow'

term.log 'When the current working directory is inside the work tree of the repository print "true", otherwise "false".\n' 'grey'
term.log '    git rev-parse --is-inside-work-tree: '
term.log "$(git rev-parse --is-inside-work-tree)"'\n' 'yellow'

term.log 'When the repository is bare print "true", otherwise "false".\n' 'grey'
term.log '    git rev-parse --is-bare-repository: '
term.log "$(git rev-parse --is-bare-repository)"'\n' 'yellow'

term.log 'When the repository is shallow print "true", otherwise "false".\n' 'grey'
term.log '    git rev-parse --is-shallow-repository: '
term.log "$(git rev-parse --is-shallow-repository)"'\n' 'yellow'

term.log 'Check if <path> is a valid repository or a gitfile that points at a valid repository, and print the location of the repository.\n' 'grey'
term.log 'If <path> is a gitfile then the resolved path to the real repository is printed.\n' 'grey'
term.log '    git rev-parse --resolve-git-dir <path>: '
term.log "$(git rev-parse --resolve-git-dir .git)"'\n' 'yellow'

term.log 'Resolve "$GIT_DIR/<path>" and takes other path relocation variables such as $GIT_OBJECT_DIRECTORY, $GIT_INDEX_FILE…​ into account.\n' 'grey'
term.log 'For example, if $GIT_OBJECT_DIRECTORY is set to /foo/bar then "git rev-parse --git-path objects/abc" returns /foo/bar/abc.\n' 'grey'
term.log '    git rev-parse --git-path <path>: '
term.log "$(git rev-parse --git-path .)"'\n' 'yellow'

term.log 'When the command is invoked from a subdirectory, show the path of the top-level directory relative to the current directory (typically a sequence of "../", or an empty string).\n' 'grey'
term.log '    git rev-parse --show-cdup: '
term.log "$(git rev-parse --show-cdup)"'\n' 'yellow'

term.log 'When the command is invoked from a subdirectory, show the path of the current directory relative to the top-level directory.\n' 'grey'
term.log '    git rev-parse --show-prefix: '
term.log "$(git rev-parse --show-prefix)"'\n' 'yellow'

term.log 'Show the absolute path of the top-level directory.\n' 'grey'
term.log '    git rev-parse --show-toplevel: '
term.log "$(git rev-parse --show-toplevel)"'\n' 'yellow'

term.log 'Show the absolute path of the root of the superproject’s working tree (if exists) that uses the current repository as its submodule.\n' 'grey'
term.log 'Outputs nothing if the current repository is not used as a submodule by any project.\n' 'grey'
term.log '    git rev-parse --show-superproject-working-tree: '
term.log "$(git rev-parse --show-superproject-working-tree)"'\n' 'yellow'

term.log 'Show the path to the shared index file in split index mode, or empty if not in split-index mode.\n' 'grey'
term.log '    git rev-parse --shared-index-path: '
term.log "$(git rev-parse --shared-index-path)"'\n' 'yellow'

term.log 'A non-ambiguous short name of the objects name. The option core.warnAmbiguousRefs is used to select the strict abbreviation mode.\n' 'grey'
term.log '    git rev-parse --abbrev-ref HEAD: '
term.log "$(git rev-parse --abbrev-ref HEAD)"'\n' 'yellow'
